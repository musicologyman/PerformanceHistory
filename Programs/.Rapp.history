swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
qplot(displ ~ hwy, data = mpg)
qplot(displ, hwy, data = mpg)
swirl()
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, mpg)
?qplot
head(mpg)
qplot(displ, hwy)
quit()
library(swirl)
rm(list=ls())
swirl()
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data="mpg")
qplot(displ, hwy, mpg)
qplot(displ, hwy, data=mpg)
quit()
rm(list=ls())
set.seed(1234)
par(mar=repeat(0, 4))
repeat(0,4)
rep(4,0)
rep(0, 4)
par(mar=rep(4, 0))
par(mar=rep(0,4))
x <-rnorm(12, mean=rep(1:3, each=4), sd = 0.2)
y <-rnorm(12, mean=rep(c(1,2,1), each=4), sd = 0.2)
plot(x, y, col = "blue", pch=19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
set.seed(143)
dataMatrix <- as.matrix(dataFrame[sample(1:12),])
heatmap(dataMatrix)
dataMatrix <- as.matrix(dataFrame[sample(1:12),])
heatmap(dataMatrix)
rm(list=lm())
rm(list=ls())
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% matv
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(mat)
prcomp(scale(mat))
sv1$V[,1]
svd1$v[,1]
play()
ls
ls()
svd$v1
svd1$v1
str(svd1)
svd1$v
svd1$u %*% svd1$d %*% svd1$v
svd1$u %*% svd1$d %*% t(svd1$v)
lib(magrittr)
library(magrittr)
svd1$v %>% t
svd1$u %*% svd1$d %*% (svd1$v %>% t)
svd1$u %*% svd1$d
ls
ls()
?sapply
?diagonal
diag( 1 : 10)
svd1$u %*% (diag(svd1$d)) %*% (svd1$v %>% t)
nxt()
back()
svd1$d
head(constantMatrix)
svd2$d
quit()
rm(list=ls())
set.seed(12345)
dm <- matrix(rnorm(400), nrow=40)
image(1:10,1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
rep(c(0,3), each = 5)
?rep
coinflip <- function(){rbinom(1, size = 1, prob=0.5)}
?sapply
addData <- function(x){if (coinflip()){x + rep(c(0,3), each=5} else {x}}
addData <- function(x){if (coinflip()){x + rep(c(0,3), each=5)} else {x}}
dm2 <- addData(dm)
image(1:10,1:40,t(dm2)[,nrow(dm2):1])
set.seed(678910)
dm2 <- addData(dm)
image(1:10,1:40,t(dm2)[,nrow(dm2):1])
datamatrix <- dm
for (i in 1:40){if (coinflip() { dm[i,] <- dm[i,] + rep(c(0,3), each=5)})}
for (i in 1:40){if (coinflip()) { dm[i,] <- dm[i,] + rep(c(0,3), each=5)})}
for (i in 1:40){if (coinflip()) { dm[i,] <- dm[i,] + rep(c(0,3), each=5)}}
image(1:10,1:40,t(dm)[,nrow(dm):1])
heatmap(datamatrix)
rm(list=ls())
library(swirl)
swirl()
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
msdist <- sub1[,10,12] %>% dist
library(magrittr)
msdist <- sub1[,10,12] %>% dist
mdist <- sub1[,10:12] %>% dist
mdist <- dist(sub1[,10:12])
hclustering <- clust(mdist)
hclustering <- hclust(mdist)
myplclust(hclusering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist(sub1[,10:12], maxCon)
mdist <- dist(sub1[,10:12]
)
mdist <- dist(sub1[,c(10:12, maxCon)]
)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=sub1$activity)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[-c(ncol(sub1)-1, ncol(sub1))], centers = 6)
kClust <- kmeans(sub1[-c(562,563)], centers = 6)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- table(kClust$cluster, sub1$activity, nstart = 100)
kClust <- table(kClust$cluster, sub1$activity, nstart=100)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
rm(list=ls())
a <- matrix(c(3,1,1,-1,3,1), nrow=2)
a
a <- matrix(c(3,1,1,-1,3,1), nrow=2, byrow=TRUE)
a
t(a)
aat <- a %*% t(a)
aat
?eigenvalues
?eigenvalue
?eigen
lambdas <- eigen(aat)
lambdas
eigen$vectors[,1] %*% (t(eigen$vectors[,2]))
t(eigen$vectors[,1]) %*% (eigen$vectors[,2])
v1 <- eigen$vectors[,1]
e <- eigen(aat)
v1 <-e$vectors[,1]
v2 <-e$vectors[,2]
v1 %*% t(v2)
t(v1) %*% v2
s
ls90
ls()
aat
aat
rm(lambdas)
ls()
rm(c(v1, v2))
rm(v1)
rm(v2)
ls()
e$
v
e$values
e$vectors
??save
?save
?workspace
load(".RData")
ls
ls()
rm(list=ls())
ls()
setwd("~/Repos/PerformanceHistory/")
ls
dir()
setwd("Programs")
dir()
?xml
??xml
getwd()
fileUrl <- "complete.xml"
library(XML)
?xmlTreeParse
xmlTreeParse(fileUrl, useInternalNodes=TRUE)
ls()
doc <- xmlTreeParse(fileUrl, useInternalNodes=TRUE)
root <- xmlRoot(doc)
library(magrittr)
xmlName(rootNode)
xmlName(root)
?xpathSApply
head(root)
subscription_concerts <- xpathSApply(root, path="//program[concertInfo/eventType='Subscription Season']")
head(subscription_concerts)
dim(subscription_concerts)
subscription_concerts %>% length
subscription_composers <- xmlSApply(subscription_concerts, "//composerName")
subscription_composers <- xpathSApply(root, path="//program[concertInfo/eventType='Subscription Season']//composerName", xmlValue)
head(subscription_composers)
summary(subscription_composers)
?distinct
??distinct
library(dplyr)
distinct(subscription_composers)
?distinct
str(subscription_composers)
composers <- data.frame(subscription_composers)
head(composers)
composer_summary <- group_by(.data=composers, subscription_composers)
head(composer_summary)
tail(composer_summary)
dim(composer_summary)
count(composer_summary)
?count
count_(subscription_composers)
count_(subscription_composers, subscription_composers)
count_(composer_summary, subscription_composers)
quit()
